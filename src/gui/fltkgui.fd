# data file for the Fltk User Interface Designer (fluid)
version 1.0308
i18n_type 1
i18n_include <libintl.h>
i18n_function gettext
header_name {.hpp}
code_name {.cpp}
decl {\#include "../gui.hpp"} {public global
}

decl {\#include "fltkhelpers.hpp"} {public global
}

decl {\#include <FL/Fl_JPEG_Image.H>} {private global
}

decl {\#include <FL/Fl_Native_File_Chooser.H>} {private local
}

decl {\#include <atomic>} {public global
}

class FltkGui {open : {public Gui}
} {
  Function {FltkGui()} {open
  } {
    Fl_Window mainWindow {
      label Pic2Lines open
      private xywh {5 278 660 610} type Single hide resizable
    } {
      Fl_Menu_Bar {} {open
        xywh {0 0 660 20}
      } {
        Submenu {} {
          label File open
          xywh {0 0 70 21}
        } {
          MenuItem fileOpen {
            label {Open...}
            callback {openJpegImage();}
            private xywh {0 0 36 21}
          }
          MenuItem {} {
            label Quit
            callback {mainWindow->hide();}
            xywh {0 0 36 21}
          }
        }
      }
      Fl_Group {} {
        label Output open
        xywh {210 35 425 570} box THIN_DOWN_FRAME
      } {
        Fl_Choice {} {
          label Unit open
          xywh {315 60 130 16} down_box BORDER_BOX
        } {
          MenuItem {} {
            label mm selected
            xywh {0 0 36 25}
          }
          MenuItem {} {
            label in
            xywh {0 0 36 25}
          }
        }
        Fl_Spinner {} {
          label Width
          xywh {315 85 115 25} type Float step 0.1
        }
        Fl_Spinner {} {
          label Height
          xywh {315 120 115 25}
        }
        Fl_Tabs {} {open
          xywh {215 170 415 435}
        } {
          Fl_Group {} {
            label {G-Code} open
            xywh {215 193 400 412} hide
          } {
            Fl_Input laserOnCommandInput {
              label {Laser on}
              private xywh {390 215 160 30}
            }
            Fl_Input laserOffCommandInput {
              label {Laser off}
              private xywh {390 245 160 25}
            }
            Fl_Value_Slider maxPowerSlider {
              label {Max power}
              private xywh {390 274 160 21} type Horizontal align 4 minimum 1 step 1 value 255 textsize 14
            }
            Fl_Spinner travelSpeedSlider {
              label {Travel speed}
              private xywh {390 305 160 30} maximum 5000 step 100 value 3000
            }
            Fl_Spinner engravingSpeedSlider {
              label {Engraving speed}
              private xywh {390 340 160 30} maximum 5000 value 5000
            }
            Fl_Spinner numPassesSlider {
              label Passes
              private xywh {390 380 160 20}
            }
            Fl_Input outputFileNameInput {
              label {Output file}
              xywh {350 450 160 25}
            }
            Fl_Button generateGcodeButton {
              label Generate
              callback {selectedOutputGenerator = "gcode";
generateOutput("polyline",
               outputFileNameInput->value());}
              private xywh {520 455 70 20}
            }
          }
          Fl_Group {} {
            label SVG open
            xywh {265 300 165 15} deactivate
          } {}
        }
      }
      Fl_Group {} {
        label {Loaded image} open
        xywh {10 50 195 180} box THIN_DOWN_FRAME
      } {
        Fl_Button loadedImageButton {
          callback {openJpegImage();}
          private xywh {15 55 185 170} box NO_BOX
          class {FltkHelpers::ResizableImageButton}
        }
      }
      Fl_Group {} {
        label Drawer open
        xywh {5 260 200 270} box DOWN_BOX
      } {
        Fl_Choice {} {
          label Drawer open
          xywh {65 270 135 20} down_box BORDER_BOX
        } {
          MenuItem {} {
            label PolyLine
            xywh {0 0 34 24}
          }
          MenuItem {} {
            label Crosses
            xywh {0 0 34 24}
          }
        }
      }
    }
  }
  decl {std::atomic<bool> quit{false};} {private local
  }
  Function {runEventLoop(int argc, char** argv)} {open
  } {
    code {mainWindow->show(argc, argv);

while (! quit && Fl::wait())
{
  // Handle events or other actions here
}} {}
  }
  Function {stopEventLoop()} {open
  } {
    code {quit = true;} {}
  }
  Function {openJpegImage()} {open private
  } {
    code {Fl_Native_File_Chooser chooser;
chooser.title("Open File");
chooser.type(Fl_Native_File_Chooser::BROWSE_FILE);
    
// Set filters for .jpg and .jpeg files
chooser.filter("JPEG Image Files\\t*.{jpg,jpeg}");

switch (chooser.show())
{
  case -1: // Error
    fprintf(stderr, "Error: %s\\n", chooser.errmsg());
    break;
  case 1: // Cancel
    break;
  default: // File selected
  {
    printf("Selected file: %s\\n", chooser.filename());
    auto loadedImage = std::make_unique<Fl_JPEG_Image>(chooser.filename());
    if(loadedImage)
    {
      auto* loadedImageWidget = loadedImageButton;
  
      loadedImageWidget->image(std::move(loadedImage));
      loadedImageWidget->redraw();
      selectedInputImagePath = chooser.filename();
    }
    else
    {
      printf("Error loading image.\\n");
    }
    break;
  }
}} {}
  }
  Function {displayErrorMessage(const std::string& message)} {open protected
  } {
    code {printf("TODO: error popup with %s!\\n", message.c_str());} {}
  }
}
