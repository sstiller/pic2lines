// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include <libintl.h>
#include "fltkgui.hpp"
#include <FL/Fl_JPEG_Image.H>
#include <FL/Fl_Native_File_Chooser.H>

void FltkGui::cb_fileOpen_i(Fl_Menu_*, void*) {
  openJpegImage();
}
void FltkGui::cb_fileOpen(Fl_Menu_* o, void* v) {
  ((FltkGui*)(o->parent()->user_data()))->cb_fileOpen_i(o,v);
}

void FltkGui::cb_Quit_i(Fl_Menu_*, void*) {
  mainWindow->hide();
}
void FltkGui::cb_Quit(Fl_Menu_* o, void* v) {
  ((FltkGui*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

unsigned char FltkGui::menu__i18n_done = 0;
Fl_Menu_Item FltkGui::menu_[] = {
 {"File", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Open...", 0,  (Fl_Callback*)FltkGui::cb_fileOpen, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Quit", 0,  (Fl_Callback*)FltkGui::cb_Quit, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* FltkGui::fileOpen = FltkGui::menu_ + 1;

unsigned char FltkGui::menu_Unit_i18n_done = 0;
Fl_Menu_Item FltkGui::menu_Unit[] = {
 {"mm", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"in", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void FltkGui::cb_generateGcodeButton_i(Fl_Button*, void*) {
  selectedOutputGenerator = "gcode";
generateOutput(outputFileNameInput->value());
}
void FltkGui::cb_generateGcodeButton(Fl_Button* o, void* v) {
  ((FltkGui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_generateGcodeButton_i(o,v);
}

void FltkGui::cb_loadedImageButton_i(FltkHelpers::ResizableImageButton*, void*) {
  openJpegImage();
}
void FltkGui::cb_loadedImageButton(FltkHelpers::ResizableImageButton* o, void* v) {
  ((FltkGui*)(o->parent()->parent()->user_data()))->cb_loadedImageButton_i(o,v);
}

void FltkGui::cb_drawerChoice_i(Fl_Choice*, void*) {
  const auto selectedIndex = drawerChoice->value();
  selectedDrawer = drawerChoice->text(selectedIndex);
  printf("Selected: %d, Text: %s\n", selectedIndex, selectedDrawer.c_str());
}
void FltkGui::cb_drawerChoice(Fl_Choice* o, void* v) {
  ((FltkGui*)(o->parent()->parent()->user_data()))->cb_drawerChoice_i(o,v);
}

FltkGui::FltkGui() {
  { mainWindow = new Fl_Double_Window(660, 610, gettext("Pic2Lines"));
    mainWindow->box(FL_FLAT_BOX);
    mainWindow->color(FL_BACKGROUND_COLOR);
    mainWindow->selection_color(FL_BACKGROUND_COLOR);
    mainWindow->labeltype(FL_NO_LABEL);
    mainWindow->labelfont(0);
    mainWindow->labelsize(14);
    mainWindow->labelcolor(FL_FOREGROUND_COLOR);
    mainWindow->user_data((void*)(this));
    mainWindow->align(Fl_Align(FL_ALIGN_TOP));
    mainWindow->when(FL_WHEN_RELEASE);
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 660, 20);
      if (!menu__i18n_done) {
        int i=0;
        for ( ; i<3; i++)
          if (menu_[i].label())
            menu_[i].label(gettext(menu_[i].label()));
        menu__i18n_done = 1;
      }
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { Fl_Group* o = new Fl_Group(210, 35, 425, 570, gettext("Output"));
      o->box(FL_THIN_DOWN_FRAME);
      { Fl_Choice* o = new Fl_Choice(315, 60, 130, 25, gettext("Unit"));
        o->down_box(FL_BORDER_BOX);
        if (!menu_Unit_i18n_done) {
          int i=0;
          for ( ; i<2; i++)
            if (menu_Unit[i].label())
              menu_Unit[i].label(gettext(menu_Unit[i].label()));
          menu_Unit_i18n_done = 1;
        }
        o->menu(menu_Unit);
      } // Fl_Choice* o
      { Fl_Spinner* o = new Fl_Spinner(315, 90, 115, 25, gettext("Width"));
        o->type(1);
        o->step(0.1);
      } // Fl_Spinner* o
      { new Fl_Spinner(315, 120, 115, 25, gettext("Height"));
      } // Fl_Spinner* o
      { Fl_Tabs* o = new Fl_Tabs(215, 170, 415, 435);
        { Fl_Group* o = new Fl_Group(215, 193, 400, 412, gettext("G-Code"));
          { laserOnCommandInput = new Fl_Input(390, 215, 160, 30, gettext("Laser on"));
          } // Fl_Input* laserOnCommandInput
          { laserOffCommandInput = new Fl_Input(390, 245, 160, 25, gettext("Laser off"));
          } // Fl_Input* laserOffCommandInput
          { maxPowerSlider = new Fl_Value_Slider(390, 274, 160, 21, gettext("Max power"));
            maxPowerSlider->type(1);
            maxPowerSlider->minimum(1);
            maxPowerSlider->step(1);
            maxPowerSlider->value(255);
            maxPowerSlider->textsize(14);
            maxPowerSlider->align(Fl_Align(FL_ALIGN_LEFT));
          } // Fl_Value_Slider* maxPowerSlider
          { travelSpeedSlider = new Fl_Spinner(390, 305, 160, 30, gettext("Travel speed"));
            travelSpeedSlider->maximum(5000);
            travelSpeedSlider->step(100);
            travelSpeedSlider->value(3000);
          } // Fl_Spinner* travelSpeedSlider
          { engravingSpeedSlider = new Fl_Spinner(390, 340, 160, 30, gettext("Engraving speed"));
            engravingSpeedSlider->maximum(5000);
            engravingSpeedSlider->value(5000);
          } // Fl_Spinner* engravingSpeedSlider
          { numPassesSlider = new Fl_Spinner(390, 380, 160, 20, gettext("Passes"));
          } // Fl_Spinner* numPassesSlider
          { outputFileNameInput = new Fl_Input(350, 450, 160, 25, gettext("Output file"));
          } // Fl_Input* outputFileNameInput
          { generateGcodeButton = new Fl_Button(520, 455, 70, 20, gettext("Generate"));
            generateGcodeButton->callback((Fl_Callback*)cb_generateGcodeButton);
          } // Fl_Button* generateGcodeButton
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(265, 300, 165, 15, gettext("SVG"));
          o->hide();
          o->deactivate();
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Tabs* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(10, 50, 195, 180, gettext("Loaded image"));
      o->box(FL_THIN_DOWN_FRAME);
      { loadedImageButton = new FltkHelpers::ResizableImageButton(15, 55, 185, 170);
        loadedImageButton->box(FL_NO_BOX);
        loadedImageButton->color(FL_BACKGROUND_COLOR);
        loadedImageButton->selection_color(FL_BACKGROUND_COLOR);
        loadedImageButton->labeltype(FL_NORMAL_LABEL);
        loadedImageButton->labelfont(0);
        loadedImageButton->labelsize(14);
        loadedImageButton->labelcolor(FL_FOREGROUND_COLOR);
        loadedImageButton->callback((Fl_Callback*)cb_loadedImageButton);
        loadedImageButton->align(Fl_Align(FL_ALIGN_CENTER));
        loadedImageButton->when(FL_WHEN_RELEASE);
      } // FltkHelpers::ResizableImageButton* loadedImageButton
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(5, 260, 200, 270, gettext("Drawer"));
      o->box(FL_DOWN_BOX);
      { drawerChoice = new Fl_Choice(65, 270, 135, 20);
        drawerChoice->down_box(FL_BORDER_BOX);
        drawerChoice->callback((Fl_Callback*)cb_drawerChoice);
        FltkHelpers::fillChoice(*drawerChoice, availableDrawers());
      } // Fl_Choice* drawerChoice
      o->end();
    } // Fl_Group* o
    mainWindow->end();
    mainWindow->resizable(mainWindow);
  } // Fl_Double_Window* mainWindow
}

void FltkGui::runEventLoop(int argc, char** argv) {
  mainWindow->show(argc, argv);
  
  while (! quit && Fl::wait())
  {
    // Handle events or other actions here
  }
}

void FltkGui::stopEventLoop() {
  quit = true;
}

void FltkGui::openJpegImage() {
  Fl_Native_File_Chooser chooser;
  chooser.title("Open File");
  chooser.type(Fl_Native_File_Chooser::BROWSE_FILE);
      
  // Set filters for .jpg and .jpeg files
  chooser.filter("JPEG Image Files\t*.{jpg,jpeg}");
  
  switch (chooser.show())
  {
    case -1: // Error
      fprintf(stderr, "Error: %s\n", chooser.errmsg());
      break;
    case 1: // Cancel
      break;
    default: // File selected
    {
      printf("Selected file: %s\n", chooser.filename());
      auto loadedImage = std::make_unique<Fl_JPEG_Image>(chooser.filename());
      if(loadedImage)
      {
        auto* loadedImageWidget = loadedImageButton;
    
        loadedImageWidget->image(std::move(loadedImage));
        loadedImageWidget->redraw();
        selectedInputImagePath = chooser.filename();
      }
      else
      {
        printf("Error loading image.\n");
      }
      break;
    }
  }
}

void FltkGui::displayErrorMessage(const std::string& message) {
  printf("TODO: error popup with %s!\n", message.c_str());
}
